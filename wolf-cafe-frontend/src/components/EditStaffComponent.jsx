import React, { useState, useEffect } from "react";
import { useParams, useLocation, useNavigate } from 'react-router-dom';
import { getStaffById, editStaff } from '../services/AuthService';
import "../styles/EditUser.css";

/**
 * EditStaffComponent: A React component to handle editing staff details.
 */
const EditStaffComponent = () => {
    // Extract the `id` parameter from the URL and hooks for navigation and location state
 const { id } = useParams();
 const navigate = useNavigate();
 const location = useLocation();
	
	const userFromProps = location.state?.user || {}; // Get the user if passed

 const [name, setName] = useState(userFromProps.name || ''); // Staff name
 const [username, setUsername] = useState(userFromProps.username || ''); // Staff username
 const [email, setEmail] = useState(userFromProps.email || ''); // Staff email 
 const [password, setPassword] = useState(userFromProps.password || ''); // Staff password
 const [error, setError] = useState('');
 // Fetch the user data only if no user was passed as props, partially generated by ChatGPT
 useEffect(() => {
   if (!userFromProps.name) {
     const fetchStaffData = async () => {
       try {
         const response = await getStaffById(id);
         const { name, username, email, password } = response.data;
         setName(name);
         setUsername(username);
         setEmail(email);
         setPassword(password);
       } catch (err) {
         setError("Failed to load staff data.");
         console.error(err);
       }
     };
     fetchStaffData();
   }
 }, [id, userFromProps]);
	
	/**
     * Handle form submission to update staff details.
     *
     * @param  e - Form submission event.
     */
 const editNewStaff = async (e) => {
   e.preventDefault();
   const staffMember = { name, username, email, password };
   try {
     await editStaff(id, staffMember);
     alert("Staff updated successfully!");
     navigate('/users');
   } catch (err) {
     setError("Error editing staff.");
     console.error(err);
   }
 };
 return (
	<div className="edit-user-container">
	      <div className="edit-user-card">
	        <h2 className="edit-user-heading">Edit Staff</h2>
	        {error && <div className="edit-user-alert-danger">{error}</div>}
	        <form onSubmit={editNewStaff}>
	          <div className="edit-user-form-group">
	            <label className="edit-user-form-label">Staff Name:</label>
	            <input
	              type="text"
	              className="edit-user-form-control"
	              placeholder="Enter Staff Name"
	              value={name}
	              onChange={(e) => setName(e.target.value)}
	              required
	            />
	          </div>
	          <div className="edit-user-form-group">
	            <label className="edit-user-form-label">Username:</label>
	            <input
	              type="text"
	              className="edit-user-form-control"
	              placeholder="Enter Username"
	              value={username}
	              onChange={(e) => setUsername(e.target.value)}
	              required
	            />
	          </div>
	          <div className="edit-user-form-group">
	            <label className="edit-user-form-label">Email:</label>
	            <input
	              type="email"
	              className="edit-user-form-control"
	              placeholder="Enter Email"
	              value={email}
	              onChange={(e) => setEmail(e.target.value)}
	              required
	            />
	          </div>
	          <button type="submit" className="edit-user-submit-btn">
	            Submit
	          </button>
	        </form>
	      </div>
	    </div>
 );
};
export default EditStaffComponent;